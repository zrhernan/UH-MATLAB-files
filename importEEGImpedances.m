function [ElectrodeLabel, ImpedanceValue] = importEEGImpedances(filename, startRow, endRow)
%IMPORTEEGIMPEDANCES Imports 64 EEG electrode impedances from 
%   'Brain Products actiCAP Impedance File Version 1.0' text files and
%   extracts the Electrode Label and correspnding Impedance Value
%   [ELECTRODELABEL,IMPEDANCEVALUE] = IMPORTEEGIMPEDANCES(FILENAME) Reads data from
%   text file FILENAME for the default selection.
%
%   [ELECTRODELABEL,IMPEDANCEVALUE] = IMPORTEEGIMPEDANCES(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   [ElectrodeLabel,ImpedanceValue] = importfile('A06-09-28-2013.txt',19,
%   82);
%
%    See also TEXTSCAN.

% Created by Zach Hernandez, University of Houston, 2015
% Originally auto-generated by MATLAB on 2015/05/20 17:41:40

%% Initialize variables.
if nargin<=2
    startRow = 17;
    endRow = 80;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*13s%5s%12s%2s%3s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray));
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
ImpedanceColumn = 5;
rawData = dataArray{ImpedanceColumn};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, ImpedanceColumn) = numbers{1};
            raw{row, ImpedanceColumn} = numbers{1};
        end
    catch me
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, ImpedanceColumn);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x) ,rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace with NaNs

%% Allocate imported array to column variable names
ElectrodeLabel = strtrim(rawCellColumns(:, 1));
ImpedanceValue = cell2mat(rawNumericColumns(:, 1));

